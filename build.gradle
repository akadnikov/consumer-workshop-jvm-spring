plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'au.com.dius.pact' version '4.3.11'
}

group = 'au.com.dius.pactworkshop'
version = '0.0.1'
sourceCompatibility = '16'
targetCompatibility = "16"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude module: "logback-classic"
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    //Spring
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    //Pact
    testImplementation 'au.com.dius.pact.consumer:junit5:4.3.11'

    //Swagger validator
    testImplementation 'com.atlassian.oai:swagger-request-validator-pact:2.28.2'
    testImplementation 'com.atlassian.oai:swagger-request-validator-core:2.28.2'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

}

test {
    useJUnitPlatform()
}

bootRun {
    standardInput = System.in
}

task copyPacts(type: Copy) {
    description 'Copies the generated Pact json file to the provider resources directory'

    from('build/pacts/')
    into('../provider/src/test/resources/pacts/')
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

pact {
    publish {
        pactDirectory = 'build/pacts'
        pactBrokerUrl = 'http://localhost:8000/'
        pactBrokerUsername = 'pact_workshop'
        pactBrokerPassword = 'pact_workshop'
        tags = [getGitBranch(), 'test', 'prod']
        consumerVersion = version.concat("+").concat(getGitHash())
    }
    broker {
        pactBrokerUrl = 'http://localhost:8000/'

        // To use basic auth
        pactBrokerUsername = 'pact_workshop'
        pactBrokerPassword = 'pact_workshop'

        // OR to use a bearer token
        //pactBrokerToken = '<TOKEN>'
    }

}

